kind: Deployment
apiVersion: apps/v1
metadata:
  name: kube-apiserver
  labels:
    app: kube-apiserver
spec:
  replicas: {{ .Replicas }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
  selector:
    matchLabels:
      app: kube-apiserver
  minReadySeconds: 15
  template:
    metadata:
      labels:
        app: kube-apiserver
        clusterID: "{{ .ClusterID }}"
{{ if .RestartDate }}
      annotations:
        openshift.io/restartedAt: "{{ .RestartDate }}"
{{ end }}
    spec:
      tolerations:
        - key: "dedicated"
          operator: "Equal"
          value: "master-{{ .ClusterID }}"
          effect: NoSchedule
        - key: "multi-az-worker"
          operator: "Equal"
          value: "true"
          effect: NoSchedule
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: dedicated
                operator: In
                values:
                - master-{{ .ClusterID }}
        podAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: clusterID
                      operator: In
                      values: ["{{ .ClusterID }}"]
                topologyKey: "kubernetes.io/hostname"
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values: ["kube-apiserver"]
              topologyKey: "kubernetes.io/hostname"
            - labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values: ["kube-apiserver"]
              topologyKey: "topology.kubernetes.io/zone"
      automountServiceAccountToken: false
{{ if .MasterPriorityClass }}
      priorityClassName: {{ .MasterPriorityClass }}
{{ end }}
      terminationGracePeriodSeconds: 90
      initContainers:
      - image: {{ imageFor "cluster-config-operator" }}
{{- if .ClusterConfigOperatorSecurityContext }}
{{- $securityContext := .ClusterConfigOperatorSecurityContext }}
        securityContext:
          runAsUser: {{ $securityContext.RunAsUser }}
{{- end }}
        imagePullPolicy: IfNotPresent
        name: config-bootstrap
        workingDir: /tmp
        command:
        - /bin/bash
        args:
        - -c
        - |-
          cd /tmp
          mkdir input output
          /usr/bin/cluster-config-operator render --config-output-file config --asset-input-dir /tmp/input --asset-output-dir /tmp/output
          cp /tmp/output/manifests/* /work
        volumeMounts:
        - mountPath: /work
          name: bootstrap-manifests
      containers:
      - image: {{ imageFor "cli" }}
{{- if .ManifestBootstrapperSecurityContext }}
{{- $securityContext := .ManifestBootstrapperSecurityContext }}
        securityContext:
          runAsUser: {{ $securityContext.RunAsUser }}
{{- end }}
        name: initialize-manifests
        env:
        - name: KUBECONFIG
          value: /var/secrets/localhost-kubeconfig/kubeconfig
        workingDir: /work
        command:
        - /bin/bash
        args:
        - -c
        - |-
          while true; do
            if oc apply -f .; then
              echo "Bootstrap manifests applied successfully."
              break
            fi
            sleep 1
          done
          while true; do
            sleep 1000
          done
        resources:
          requests:
            cpu: 1m
            memory: 5Mi
        volumeMounts:
        - mountPath: /work
          name: bootstrap-manifests
          readOnly: true
        - mountPath: /var/secrets/localhost-kubeconfig
          name: localhost-kubeconfig
          readOnly: true
      - name: kube-apiserver
{{- if .KubeAPIServerSecurityContext }}
{{- $securityContext := .KubeAPIServerSecurityContext }}
        securityContext:
          runAsUser: {{ $securityContext.RunAsUser }}
{{- end }}
        image: {{ imageFor "hyperkube" }}
        command:
        - hyperkube
        - kube-apiserver
        args:
        - "--openshift-config=/etc/kubernetes/apiserver-config/config.yaml"
{{- if .KPInfo }}
        - "--encryption-provider-config=/etc/kubernetes/kms-config/config.yaml"
{{- end }}
{{- if .KubeAPIServerVerbosity }}
        - "--v={{ .KubeAPIServerVerbosity }}"
{{- end }}
        workingDir: /var/log/kube-apiserver
{{- if .ApiserverLivenessProbe }}
{{- $probe := .ApiserverLivenessProbe }}
        livenessProbe:
          httpGet:
            scheme: {{ or $probe.HTTPGet.Scheme "HTTPS" }}
            port: {{ or $probe.HTTPGet.Port .InternalAPIPort }}
            path: {{ or $probe.HTTPGet.Path "livez?exclude=etcd" }}
          initialDelaySeconds: {{ or $probe.InitialDelaySeconds 10 }}
          periodSeconds: {{ or $probe.PeriodSeconds 10 }}
          timeoutSeconds: {{ or $probe.TimeoutSeconds 1 }}
          failureThreshold: {{ or $probe.FailureThreshold 3 }}
          successThreshold: {{ or $probe.SuccessThreshold 1 }}
{{- else }}
        livenessProbe:
          httpGet:
            scheme: HTTPS
            port: {{ .InternalAPIPort }}
{{- if .ApiserverLivenessPath }}
            path: "{{ .ApiserverLivenessPath }}"
{{- else }}
            path: livez
{{- end }}
          initialDelaySeconds: 45
          timeoutSeconds: 10
{{- end }}
{{- if .ApiserverReadinessProbe }}
{{- $probe := .ApiserverReadinessProbe }}
        readinessProbe:
          httpGet:
            scheme: {{ or $probe.HTTPGet.Scheme "HTTPS" }}
            port: {{ or $probe.HTTPGet.Port .InternalAPIPort }}
            path: {{ or $probe.HTTPGet.Path "readyz" }}
          initialDelaySeconds: {{ or $probe.InitialDelaySeconds 10 }}
          periodSeconds: {{ or $probe.PeriodSeconds 10 }}
          timeoutSeconds: {{ or $probe.TimeoutSeconds 1 }}
          failureThreshold: {{ or $probe.FailureThreshold 3 }}
          successThreshold: {{ or $probe.SuccessThreshold 1 }}
{{- else }}
        readinessProbe:
          httpGet:
            scheme: HTTPS
            port: {{ .InternalAPIPort }}
            path: readyz
          initialDelaySeconds: 10
          timeoutSeconds: 10
{{- end }}
{{ if .KubeAPIServerResources }}
        resources:{{ range .KubeAPIServerResources }}{{ range .ResourceRequest }}
          requests: {{ if .CPU }}
            cpu: {{ .CPU }}{{ end }}{{ if .Memory }}
            memory: {{ .Memory }}{{ end }}{{ end }}{{ range .ResourceLimit }}
          limits: {{ if .CPU }}
            cpu: {{ .CPU }}{{ end }}{{ if .Memory }}
            memory: {{ .Memory }}{{ end }}{{ end }}{{ end }}
{{ end }}
        env:
        - name: HOST_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
        volumeMounts:
        - mountPath: /etc/kubernetes/secret/
          name: secret
        - mountPath: /etc/kubernetes/apiserver-config/
          name: apiserver-config
        - mountPath: /etc/kubernetes/config/
          name: config
        - mountPath: /etc/kubernetes/oauth/
          name: oauth
        - mountPath: /etc/kubernetes/auth-token-webhook
          name: authentication-token-webhook-config
        - mountPath: /var/log/kube-apiserver/
          name: logs
        - name: apiserver-cm
          mountPath: /etc/kubernetes/audit/
{{ if .KPInfo }}
        - name: kms-config
          mountPath: /etc/kubernetes/kms-config/
        - name: kms-socket
          mountPath: /tmp
      - name: kms
{{- if .KMSSecurityContext }}
{{- $securityContext := .KMSSecurityContext }}
        securityContext:
          runAsUser: {{ $securityContext.RunAsUser }}
{{- end }}
        image: {{ .KMSImage }}
        imagePullPolicy: IfNotPresent
{{ if .KMSServerResources }}
        resources:{{ range .KMSServerResources }}{{ range .ResourceRequest }}
          requests: {{ if .CPU }}
            cpu: {{ .CPU }}{{ end }}{{ if .Memory }}
            memory: {{ .Memory }}{{ end }}{{ end }}{{ range .ResourceLimit }}
          limits: {{ if .CPU }}
            cpu: {{ .CPU }}{{ end }}{{ if .Memory }}
            memory: {{ .Memory }}{{ end }}{{ end }}{{ end }}
{{ end }}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
{{- if .KMSLivenessProbe }}
{{- $probe := .KMSLivenessProbe }}
        livenessProbe:
          httpGet:
            scheme: {{ or $probe.HTTPGet.Scheme "HTTP" }}
            port: {{ or $probe.HTTPGet.Port 8081 }}
            path: {{ or $probe.HTTPGet.Path "healthz/liveness" }}
          initialDelaySeconds: {{ or $probe.InitialDelaySeconds 10 }}
          periodSeconds: {{ or $probe.PeriodSeconds 10 }}
          timeoutSeconds: {{ or $probe.TimeoutSeconds 1 }}
          failureThreshold: {{ or $probe.FailureThreshold 3 }}
          successThreshold: {{ or $probe.SuccessThreshold 1 }}
{{- else }}
        livenessProbe:
          httpGet:
            path: /healthz/liveness
            port: 8081
            scheme: HTTP
          initialDelaySeconds: 120
          periodSeconds: 300
          successThreshold: 1
          failureThreshold: 3
          timeoutSeconds: 160
{{- end }}
        env:
        - name: REGION
          value: {{ .KPRegion }}
        - name: LOG_LEVEL
          value: info
        - name: NUM_LEN_BYTES
          value: "4"
        - name: CACHE_TIMEOUT_IN_HOURS
          value: "1"
        - name: RESTART_DELAY_IN_SECONDS
          value: "0"
        - name: UNIX_SOCKET_PATH
          value: "/tmp/keyprotectprovider.sock"
        - name: KP_TIMEOUT
          value: "10"
        - name: KP_DATA_JSON
          value: '{{ .KPInfo }}'
        - name: KP_WDEK_PATH
          value: "/tmp/kp/wdek"
        - name: KP_STATE_PATH
          value: "/tmp/kp/state"
        - name: API_KEY
          value: {{ .KPAPIKey }}
        - name: HEALTHZ_PATH
          value: /healthz
        - name: HEALTHZ_PORT
          value: ":8081"
        volumeMounts:
        - name: kms-socket
          mountPath: /tmp
        - name: kms-kp
          mountPath: /tmp/kp
          readOnly: true
{{ end }}
{{- if .ROKSMetricsImage }}
      - name: metrics-pusher
{{- if .ROKSMetricsSecurityContextMaster }}
{{- $securityContext := .ROKSMetricsSecurityContextMaster }}
        securityContext:
          runAsUser: {{ $securityContext.RunAsUser }}
{{- end }}
        image: {{ .ROKSMetricsImage }}
        imagePullPolicy: IfNotPresent
        command:
          - "metrics-pusher"
        args:
          - "--destination-path=/api/v1/namespaces/openshift-roks-metrics/services/push-gateway:http/proxy/metrics/job/kube-apiserver"
          - "--kubeconfig=/etc/openshift/kubeconfig/kubeconfig"
          - "--frequency=30s"
          - "--source-path=/metrics"
        terminationMessagePolicy: FallbackToLogsOnError
        resources:
          requests:
            cpu: 5m
            memory: 50Mi
        volumeMounts:
          - mountPath: /etc/openshift/kubeconfig
            name: kubeconfig
            readOnly: true
{{- end }}
{{ if .PortierisEnabled }}
      - name: portieris
{{- if .PortierisSecurityContext }}
{{- $securityContext := .PortierisSecurityContext }}
        securityContext:
          runAsUser: {{ $securityContext.RunAsUser }}
{{- end }}
        image: {{ .PortierisImage }}
        imagePullPolicy: IfNotPresent
        command:
          - "/portieris"
        args:
          - "--kubeconfig=/etc/openshift/kubeconfig/kubeconfig"
          - "--alsologtostderr"
          - "-v=4"
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
{{ if .PortierisContainerResources }}
        resources:{{ range .PortierisContainerResources }}{{ range .ResourceRequest }}
          requests: {{ if .CPU }}
            cpu: {{ .CPU }}{{ end }}{{ if .Memory }}
            memory: {{ .Memory }}{{ end }}{{ end }}{{ range .ResourceLimit }}
          limits: {{ if .CPU }}
            cpu: {{ .CPU }}{{ end }}{{ if .Memory }}
            memory: {{ .Memory }}{{ end }}{{ end }}{{ end }}
{{ end }}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
{{- if .PortierisLivenessProbe }}
{{- $probe := .PortierisLivenessProbe }}
        livenessProbe:
          httpGet:
            scheme: {{ or $probe.HTTPGet.Scheme "HTTPS" }}
            port: {{ or $probe.HTTPGet.Port 8000 }}
            path: {{ or $probe.HTTPGet.Path "/health/liveness" }}
          initialDelaySeconds: {{ or $probe.InitialDelaySeconds 10 }}
          periodSeconds: {{ or $probe.PeriodSeconds 10 }}
          timeoutSeconds: {{ or $probe.TimeoutSeconds 1 }}
          failureThreshold: {{ or $probe.FailureThreshold 3 }}
          successThreshold: {{ or $probe.SuccessThreshold 1 }}
{{- else }}
        livenessProbe:
          httpGet:
            port: 8000
            path: "/health/liveness"
            scheme: HTTPS
          initialDelaySeconds: 120
          periodSeconds: 300
          successThreshold: 1
          failureThreshold: 3
          timeoutSeconds: 160
{{- end }}
        volumeMounts:
        - mountPath: /etc/openshift/kubeconfig
          name: kubeconfig
          readOnly: true
        - mountPath: /etc/certs
          name: portieris-certs
          readOnly: true
{{ end }}
      volumes:
      - name: bootstrap-manifests
        emptyDir: {}
      - secret:
          secretName: kube-apiserver
          defaultMode: 0640
        name: secret
      - emptyDir: {}
        name: logs
      - configMap:
          name: kube-apiserver
        name: config
      - configMap:
          name: kube-apiserver-config
        name: apiserver-config
      - configMap:
          name: kube-apiserver-oauth-metadata
        name: oauth
      - secret:
          secretName: kube-apiserver-authentication-token-webhook-config
          defaultMode: 0640
        name: authentication-token-webhook-config
      - secret:
          secretName: localhost-admin-kubeconfig
          defaultMode: 0640
        name: localhost-kubeconfig
{{- if or .ROKSMetricsImage .PortierisEnabled }}
      - secret:
          secretName: service-network-admin-kubeconfig
          defaultMode: 0640
        name: kubeconfig
{{- end }}
      - name: apiserver-cm
        configMap:
          name: {{ if .APIServerAuditEnabled }}apiserver-audit-cm{{ else }}apiserver-default-audit-cm{{ end }}
{{ if .KPInfo }}
      - name: kms-config
        configMap:
          name: kms-config
      - name: kms-socket
        emptyDir: {}
      - name: kms-kp
        secret:
          secretName: kp-wdek-secret
          optional: true
          defaultMode: 0440
{{ end }}
{{ if .PortierisEnabled }}
      - name: portieris-certs
        secret:
          defaultMode: 0640
          secretName: portieris-certs
{{ end }}
