kind: Deployment
apiVersion: apps/v1
metadata:
  name: kube-controller-manager
spec:
  replicas: {{ .Replicas }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
  selector:
    matchLabels:
      app: kube-controller-manager
  minReadySeconds: 30
  template:
    metadata:
      labels:
        app: kube-controller-manager
        clusterID: "{{ .ClusterID }}"
{{ if .RestartDate }}
      annotations:
        openshift.io/restartedAt: "{{ .RestartDate }}"
{{ end }}
    spec:
      tolerations:
        - key: "dedicated"
          operator: "Equal"
          value: "master-{{ .ClusterID }}"
          effect: NoSchedule
        - key: "multi-az-worker"
          operator: "Equal"
          value: "true"
          effect: NoSchedule
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: dedicated
                operator: In
                values:
                - master-{{ .ClusterID }}
        podAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: clusterID
                      operator: In
                      values: ["{{ .ClusterID }}"]
                topologyKey: "kubernetes.io/hostname"
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values: ["kube-controller-manager"]
              topologyKey: "kubernetes.io/hostname"
            - labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values: ["kube-controller-manager"]
              topologyKey: "topology.kubernetes.io/zone"
      automountServiceAccountToken: false
{{ if .MasterPriorityClass }}
      priorityClassName: {{ .MasterPriorityClass }}
{{ end }}
      containers:
      - name: kube-controller-manager
{{- if .KubeControllerManagerSecurityContext }}
{{- $securityContext := .KubeControllerManagerSecurityContext }}
        securityContext:
          runAsUser: {{ $securityContext.RunAsUser }}
{{- end }}
        image: {{ imageFor "hyperkube" }}
        command:
        - hyperkube
        - kube-controller-manager
        args:
        - "--openshift-config=/etc/kubernetes/cmconfig/config.yaml"
        - "--kubeconfig=/etc/kubernetes/secret/kubeconfig"
        - "--authentication-kubeconfig=/etc/kubernetes/secret/kubeconfig"
        - "--authorization-kubeconfig=/etc/kubernetes/secret/kubeconfig"
        - "--allocate-node-cidrs=true"
        - "--cert-dir=/var/run/kubernetes"
        - "--cluster-cidr={{ .PodCIDR }}"
        - "--cluster-signing-cert-file=/etc/kubernetes/secret/cluster-signer.crt"
        - "--cluster-signing-key-file=/etc/kubernetes/secret/cluster-signer.key"
        - "--configure-cloud-routes=false"
        - "--controllers=*"
        - "--controllers=-ttl"
        - "--controllers=-bootstrapsigner"
        - "--controllers=-tokencleaner"
        - "--enable-dynamic-provisioning=true"
        - "--flex-volume-plugin-dir=/etc/kubernetes/kubelet-plugins/volume/exec"
        - "--kube-api-burst=300"
        - "--kube-api-qps=150"
        - "--leader-elect-resource-lock=configmaps"
        - "--leader-elect=true"
        - "--leader-elect-lease-duration=137s"
        - "--leader-elect-renew-deadline=107s"
        - "--leader-elect-retry-period=26s"
        - "--profiling=false"
        - "--root-ca-file=/etc/kubernetes/config/root-ca.crt"
        - "--secure-port=10257"
        - "--service-account-private-key-file=/etc/kubernetes/secret/service-account.key"
        - "--service-cluster-ip-range={{ .ServiceCIDR }}"
        - "--use-service-account-credentials=true"
        - "--experimental-cluster-signing-duration=17520h"
        - "--tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256,TLS_AES_128_GCM_SHA256,TLS_CHACHA20_POLY1305_SHA256,TLS_AES_256_GCM_SHA384"
{{ range $featureGate := .DefaultFeatureGates }}
        - "--feature-gates={{ $featureGate }}"
{{ end }}
{{ range $featureGate := .ExtraFeatureGates }}
        - "--feature-gates={{ $featureGate }}"
{{ end }}
{{ if .KubeControllerManagerResources }}
        resources:{{ range .KubeControllerManagerResources }}{{ range .ResourceRequest }}
          requests: {{ if .CPU }}
            cpu: {{ .CPU }}{{ end }}{{ if .Memory }}
            memory: {{ .Memory }}{{ end }}{{ end }}{{ range .ResourceLimit }}
          limits: {{ if .CPU }}
            cpu: {{ .CPU }}{{ end }}{{ if .Memory }}
            memory: {{ .Memory }}{{ end }}{{ end }}{{ end }}
{{ end }}
{{- if .ControllerManagerLivenessProbe }}
{{- $probe := .ControllerManagerLivenessProbe }}
        livenessProbe:
          httpGet:
            scheme: {{ or $probe.HTTPGet.Scheme "HTTPS" }}
            port: {{ or $probe.HTTPGet.Port 10257 }}
            path: {{ or $probe.HTTPGet.Path "healthz" }}
          initialDelaySeconds: {{ or $probe.InitialDelaySeconds 10 }}
          periodSeconds: {{ or $probe.PeriodSeconds 10 }}
          timeoutSeconds: {{ or $probe.TimeoutSeconds 1 }}
          failureThreshold: {{ or $probe.FailureThreshold 3 }}
          successThreshold: {{ or $probe.SuccessThreshold 1 }}
{{- end }}
        volumeMounts:
        - mountPath: /etc/kubernetes/cmconfig
          name: cmconfig
        - mountPath: /etc/kubernetes/config
          name: config
        - mountPath: /etc/kubernetes/secret
          name: secret
        - mountPath: /var/run/kubernetes
          name: certdir
        - mountPath: /var/log/kube-controller-manager
          name: logs
        workingDir: /var/log/kube-controller-manager
      volumes:
      - secret:
          secretName: kube-controller-manager
          defaultMode: 0640
        name: secret
      - configMap:
          name: kube-controller-manager-config
        name: cmconfig
      - configMap:
          name: kube-controller-manager
        name: config
      - emptyDir: {}
        name: logs
      - emptyDir: {}
        name: certdir
